name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'hysio/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'hysio/**'
      - '.github/workflows/ci.yml'

env:
  NODE_VERSION: '18.x'
  WORKING_DIRECTORY: './hysio'

jobs:
  # Code Quality and Security Checks
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: TypeScript compilation check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx tsc --noEmit

      - name: ESLint check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint

      - name: Security audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gate

    strategy:
      matrix:
        node-version: ['18.x', '20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ${{ env.WORKING_DIRECTORY }}/coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build artifacts
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ ! -d ".next" ]; then
            echo "Build directory not found!"
            exit 1
          fi

          if [ ! -f ".next/BUILD_ID" ]; then
            echo "Build ID file not found!"
            exit 1
          fi

          echo "Build verification successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.WORKING_DIRECTORY }}/.next/
          retention-days: 1

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Healthcare Compliance Checks
  compliance-check:
    name: Healthcare Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: quality-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for PHI in code
        run: |
          echo "Scanning for potential PHI patterns..."

          # Check for hardcoded patient data patterns
          if grep -r -E "(ssn|social|patient.*id|medical.*record|birth.*date)" \
             --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
             ./hysio/src/ || true; then
            echo "‚ö†Ô∏è  Potential PHI patterns found. Please review."
          fi

          # Check for hardcoded credentials
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}" \
             --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
             ./hysio/ || true; then
            echo "‚ùå Hardcoded credentials found!"
            exit 1
          fi

          echo "‚úÖ Compliance check completed"

      - name: Verify security headers configuration
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ -f "next.config.ts" ] || [ -f "next.config.js" ]; then
            echo "‚úÖ Next.js configuration file found"

            # Check for security headers
            if grep -q "headers\|securityHeaders" next.config.* || true; then
              echo "‚úÖ Security headers configuration detected"
            else
              echo "‚ö†Ô∏è  No security headers configuration found"
            fi
          else
            echo "‚ö†Ô∏è  No Next.js configuration file found"
          fi

  # Performance and Bundle Analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.WORKING_DIRECTORY }}/.next/

      - name: Bundle analysis
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Install bundle analyzer if not in package.json
          npx @next/bundle-analyzer --help > /dev/null 2>&1 || npm install --save-dev @next/bundle-analyzer

          # Analyze bundle size
          echo "üìä Bundle Analysis:"
          du -sh .next/ || true

          # Check for large chunks
          find .next -name "*.js" -size +1M -exec ls -lh {} \; || true

          echo "‚úÖ Performance analysis completed"

  # Accessibility Testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Install accessibility tools
        run: |
          npm install -g @axe-core/cli
          npm install -g http-server

      - name: Build and serve application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm run build
          npx http-server .next -p 3000 &
          sleep 10

      - name: Run accessibility tests
        run: |
          axe http://localhost:3000 \
            --tags wcag2a,wcag2aa,wcag21aa \
            --reporter json \
            --output a11y-results.json || true

          if [ -f "a11y-results.json" ]; then
            echo "‚ôø Accessibility test results available"
            cat a11y-results.json
          fi

  # Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality-gate, test, build, security-scan, compliance-check, performance]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quality-gate.result }}" != "success" ]]; then
            echo "‚ùå Quality gate failed"
            exit 1
          fi

          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          fi

          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Build failed"
            exit 1
          fi

          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "‚ùå Security scan failed"
            exit 1
          fi

          if [[ "${{ needs.compliance-check.result }}" != "success" ]]; then
            echo "‚ùå Compliance check failed"
            exit 1
          fi

          if [[ "${{ needs.performance.result }}" != "success" ]]; then
            echo "‚ùå Performance analysis failed"
            exit 1
          fi

          echo "‚úÖ All CI checks passed successfully!"

  # Notification on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-gate, test, build, security-scan, compliance-check]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Send failure notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'üö® CI Pipeline failed on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}