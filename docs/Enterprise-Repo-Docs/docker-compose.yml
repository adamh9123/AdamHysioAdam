# Hysio Medical Scribe - Development Environment
# Docker Compose configuration for local development with full healthcare stack

version: '3.8'

services:
  # Main application service
  hysio-medical-scribe:
    build:
      context: ./hysio-medical-scribe
      dockerfile: Dockerfile
      target: builder
      args:
        NODE_VERSION: 18
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-dev}
        VERSION: ${VERSION:-dev-latest}
    container_name: hysio-medical-scribe
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugging port
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=postgresql://hysio_user:hysio_password@postgres:5432/hysio_dev
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=dev-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - ENCRYPTION_KEY=dev-encryption-key-32-characters
      - SESSION_SECRET=dev-session-secret-key-change-in-production
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=
      - SMTP_PASS=
      - LOG_LEVEL=debug
      - HIPAA_COMPLIANT_LOGGING=true
    volumes:
      - ./hysio-medical-scribe:/app
      - /app/node_modules
      - hysio_uploads:/app/uploads
      - hysio_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - mailhog
    networks:
      - hysio-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hysio.rule=Host(`localhost`)"
      - "traefik.http.services.hysio.loadbalancer.server.port=3000"

  # PostgreSQL database for healthcare data
  postgres:
    image: postgres:15-alpine
    container_name: hysio-postgres
    environment:
      - POSTGRES_DB=hysio_dev
      - POSTGRES_USER=hysio_user
      - POSTGRES_PASSWORD=hysio_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./db/backups:/backups
    networks:
      - hysio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hysio_user -d hysio_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=1000
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: hysio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - hysio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    sysctls:
      - net.core.somaxconn=1024

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: hysio-mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - hysio-network
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hysio-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@hysio.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - hysio-network
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: hysio-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - hysio-network
    restart: unless-stopped

  # Elasticsearch for advanced search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: hysio-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hysio-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kibana for data visualization and monitoring
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: hysio-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - hysio-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx reverse proxy for SSL termination and load balancing
  nginx:
    image: nginx:alpine
    container_name: hysio-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - hysio-medical-scribe
    networks:
      - hysio-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hysio-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hysio-network
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hysio-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - hysio-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: hysio-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - hysio-network
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  hysio_uploads:
    driver: local
  hysio_logs:
    driver: local

# Networks
networks:
  hysio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16